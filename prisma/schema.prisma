// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Module 1 & 2: User Management
model users {
  id              String   @id @default(uuid())
  wallet_pub_key  String   @unique
  display_name    String?
  mode            String   @default("true_self") // true_self, alias, soul
  pillar_id       String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  pillar          pillars? @relation(fields: [pillar_id], references: [id])
  posts           posts[]
  created_groups  groups[] @relation("GroupCreator")
  group_memberships group_memberships[]
  post_flags      post_flags[]
}

// Module 3: Pillars
model pillars {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  color_hex     String   @default("#000000")
  icon_name     String   @default("circle")
  display_order Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  
  // Relations
  groups        groups[]
  users         users[]
}

// Module 3: Groups
model groups {
  id               String    @id @default(uuid())
  pillar_id        String
  name             String
  description      String?
  member_count     Int       @default(0)
  post_count       Int       @default(0)
  last_activity_at DateTime?
  created_by       String?
  is_default       Boolean   @default(false)
  created_at       DateTime  @default(now())
  
  // Relations
  pillar           pillars   @relation(fields: [pillar_id], references: [id])
  creator          users?    @relation("GroupCreator", fields: [created_by], references: [id])
  posts            posts[]
  group_memberships group_memberships[]
}

// Module 3: Posts
model posts {
  id          String    @id @default(uuid())
  group_id    String
  author_id   String
  parent_id   String?
  content     String
  view_count  Int       @default(0)
  is_edited   Boolean   @default(false)
  edited_at   DateTime?
  is_deleted  Boolean   @default(false)
  deleted_at  DateTime?
  thread_depth Int      @default(0)
  created_at  DateTime  @default(now())
  
  // Relations
  group       groups    @relation(fields: [group_id], references: [id])
  author      users     @relation(fields: [author_id], references: [id])
  parent      posts?    @relation("PostReplies", fields: [parent_id], references: [id])
  replies     posts[]   @relation("PostReplies")
  post_sources post_sources[]
  post_flags  post_flags[]
  
  // Indexes
  @@index([parent_id])
  @@index([created_at])
  @@index([group_id, created_at])
}

// Module 3: Group Memberships
model group_memberships {
  user_id    String
  group_id   String
  role       String   @default("member") // member, moderator, admin
  joined_at  DateTime @default(now())
  
  // Relations
  user       users    @relation(fields: [user_id], references: [id])
  group      groups   @relation(fields: [group_id], references: [id])
  
  @@id([user_id, group_id])
}

// Module 3: Post Sources
model post_sources {
  id               String   @id @default(uuid())
  post_id          String
  url              String
  title            String?
  description      String?
  ai_summary       String?
  credibility_score Decimal? @db.Decimal(3, 2)
  created_at       DateTime @default(now())
  
  // Relations
  post             posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

// Module 3: Post Flags
model post_flags {
  id         String   @id @default(uuid())
  post_id    String
  user_id    String
  reason     String?
  created_at DateTime @default(now())
  
  // Relations
  post       posts    @relation(fields: [post_id], references: [id])
  user       users    @relation(fields: [user_id], references: [id])
  
  @@unique([post_id, user_id])
}
