// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core user model (Module 1)
model User {
  id              String    @id @default(uuid())
  walletPubKey    String    @unique @map("wallet_pub_key")
  displayName     String?   @map("display_name")
  mode            Boolean   @default(true) @map("mode") // true=shadow, false=true_self
  pillarId        Int?      @map("pillar_id")
  reputationScore Int       @default(0) @map("reputation_score")
  createdAt       DateTime  @default(now()) @map("created_at")
  lastLoginAt     DateTime? @map("last_login_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  settings    UserSettings?
  sessions    Session[]
  emails      EmailVerification[]

  @@index([walletPubKey])
  @@index([pillarId])
  @@map("users")
}

// User settings (Module 1)
model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique @map("user_id")
  email                String?
  emailVerified        Boolean  @default(false) @map("email_verified")
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  theme                String   @default("system")
  language             String   @default("en")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Session management (Module 2)
model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  tokenHash    String   @unique @map("token_hash")
  mode         String   @db.VarChar(10)
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Nonce for wallet authentication (Module 2)
model Nonce {
  id            String   @id @default(uuid())
  walletAddress String   @unique @map("wallet_address")
  nonce         String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")

  @@index([expiresAt])
  @@map("nonces")
}

// Email verification (Module 2)
model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  email     String
  token     String   @unique
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("email_verifications")
}

// Enums for future use
enum UserMode {
  TRUE_SELF @map("true")
  SHADOW    @map("shadow")
  SOUL      @map("soul")
}

enum Pillar {
  TECHNOLOGY
  POLITICS
  PHILOSOPHY
  SCIENCE
  ARTS
  BUSINESS
  LIFESTYLE
}
